diff --git a/modules/ui/dashboard/farm_ui_dashboard.api.php b/modules/ui/dashboard/farm_ui_dashboard.api.php
index 1454b867..6463f911 100644
--- a/modules/ui/dashboard/farm_ui_dashboard.api.php
+++ b/modules/ui/dashboard/farm_ui_dashboard.api.php
@@ -35,6 +35,9 @@ function hook_farm_dashboard_panes() {
       // Specify a 'block' to automatically load a Block.
       'block' => 'my_block',
 
+      // Specify a block plugin id to load custom Blocks.
+      'block_plugin' => 'my_block_plugin_id',
+
       // Optional arguments to pass to the view or block.
       // This is useful if the view or block can be used in different contexts.
       'args' => [
diff --git a/modules/ui/dashboard/src/Controller/DashboardController.php b/modules/ui/dashboard/src/Controller/DashboardController.php
index af1ec739..dd8067e5 100644
--- a/modules/ui/dashboard/src/Controller/DashboardController.php
+++ b/modules/ui/dashboard/src/Controller/DashboardController.php
@@ -2,8 +2,10 @@
 
 namespace Drupal\farm_ui_dashboard\Controller;
 
+use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\views\Views;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -21,18 +23,38 @@ class DashboardController extends ControllerBase {
    */
   protected $layoutPluginManager;
 
+  /**
+   * The block manager.
+   *
+   * @var \Drupal\Core\Block\BlockManagerInterface
+   */
+  protected $blockManager;
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $currentUser;
+
   /**
    * Class constructor.
    */
-  public function __construct(LayoutPluginManagerInterface $layout_plugin_manager) {
+  public function __construct(LayoutPluginManagerInterface $layout_plugin_manager, BlockManagerInterface $block_manager, AccountInterface $current_user) {
     $this->layoutPluginManager = $layout_plugin_manager;
+    $this->blockManager = $block_manager;
+    $this->currentUser = $current_user;
   }
 
   /**
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    return new static($container->get('plugin.manager.core.layout'));
+    return new static(
+      $container->get('plugin.manager.core.layout'),
+      $container->get('plugin.manager.block'),
+      $container->get('current_user'),
+    );
   }
 
   /**
@@ -124,6 +146,20 @@ class DashboardController extends ControllerBase {
         $output = $this->entityTypeManager()->getViewBuilder('block')->view($block);
       }
 
+      // Or if a plugin block id is provided, display the block.
+      elseif (!empty($pane['block_plugin'])) {
+        // Render plugin block if is set.
+        $block_plugin = $this->blockManager->createInstance($pane['block_plugin'], $args);
+        if ($block_plugin) {
+          // Check block access.
+          $access_result = $block_plugin->access($this->currentUser);
+          if ($access_result == TRUE) {
+            // Builds renderable array of the block.
+            $output = $block_plugin->build();
+          }
+        }
+      }
+
       // If a specific title was provided, use it.
       if (!empty($pane['title'])) {
         $title = $pane['title'];
