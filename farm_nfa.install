<?php

/**
 * @file
 * Farm NFA install.
 */

/**
 * Implements hook_install().
 */
function farm_nfa_install() {
  variable_set('site_frontpage', 'fmis');
}

/**
 * Implements hook_uninstall().
 */
function farm_nfa_uninstall() {
  if (variable_get('site_frontpage', '') == 'fmis') {
    variable_set('site_frontpage', 'farm');
  }
}

/**
 * Implements hook_schema().
 */
function farm_nfa_schema() {
  $schema['farm_nfa_forest_plan_type'] = array(
    'description' => 'NFA forest plan types.',
    'fields' => array(
      'plan_id' => array(
        'description' => 'Plan ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Plan type.',
        'type' => 'varchar',
        'length' => '16',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('plan_id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );
  $schema['farm_nfa_forest_plan_categories'] = array(
    'description' => 'Associates forest plans with log categories.',
    'fields' => array(
      'plan_id' => array(
        'description' => 'Plan ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tid' => array(
        'description' => 'Category term ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('plan_id', 'tid'),
  );
  $schema['farm_nfa_budget_projection'] = array(
    'description' => 'NFA plan budget projections.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key for a projection row.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'plan_id' => array(
        'description' => 'The ID of the plan this projection is associated with.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'Projection type (income or expense).',
        'type' => 'varchar',
        'length' => '8',
        'not null' => FALSE,
      ),
      'value' => array(
        'description' => 'The projection value.',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 16,
        'scale' => 2,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'plan_id' => array('plan_id'),
    ),
  );
  $schema['farm_nfa_budget_item'] = array(
    'description' => 'NFA plan budget items.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key for a single budget item.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'plan_id' => array(
        'description' => 'The ID of the plan this budget item is associated with.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'log_id' => array(
        'description' => 'The ID of the log this budget item is associated with.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'Description of the budget item.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'Budget item type (income or expense).',
        'type' => 'varchar',
        'length' => '8',
        'not null' => FALSE,
      ),
      'category' => array(
        'description' => 'Budget item category.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'unit_value' => array(
        'description' => 'Budget item unit value.',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 16,
        'scale' => 2,
        'not null' => FALSE,
      ),
      'quantity' => array(
        'description' => 'Budget item quantity.',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 16,
        'scale' => 2,
        'not null' => FALSE,
      ),
      'total_value' => array(
        'description' => 'Budget item total value.',
        'type' => 'numeric',
        'unsigned' => TRUE,
        'precision' => 16,
        'scale' => 2,
        'not null' => FALSE,
      ),
      'date_required' => array(
        'description' => 'Timestamp when the budget item is needed by.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'date_created' => array(
        'description' => 'Timestamp when the budget item was created.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'date_updated' => array(
        'description' => 'Timestamp when the budget item was last updated.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'user_id' => array(
        'description' => 'ID of the user who added the budget item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'plan_id' => array('plan_id'),
      'log_id' => array('log_id'),
    ),
  );
  return $schema;
}

/**
 * Add table: {farm_nfa_forest_plan_categories}
 */
function farm_nfa_update_7000(&$sandbox) {
  $table = 'farm_nfa_forest_plan_categories';
  $schema[$table] = array(
    'description' => 'Associates forest plans with log categories.',
    'fields' => array(
      'plan_id' => array(
        'description' => 'Plan ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tid' => array(
        'description' => 'Category term ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('plan_id', 'tid'),
  );
  db_create_table($table, $schema[$table]);
}

/**
 * Split CFRs into Natural Forest, Plantation, and Urban Forest.
 */
function farm_nfa_update_7001(&$sandbox) {

  // Get the vocabulary ID for farm_areas.
  $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'farm_areas'")->fetchField();

  // If no vid was found, bail.
  if (empty($vid)) {
    return;
  }

  // Define a common query for finding CFRs with a specific term description.
  $query = "SELECT t.tid FROM {taxonomy_term_data} t
  LEFT JOIN {field_data_field_farm_area_type} at ON t.tid = at.entity_id AND at.entity_type = 'taxonomy_term'
  LEFT JOIN {field_data_field_farm_description} d ON d.entity_id = at.entity_id AND d.entity_type = 'taxonomy_term'
	WHERE t.vid = :vid
	AND at.field_farm_area_type_value = 'cfr'";

  // Define common query arguments.
  $args = array(
    ':vid' => $vid,
  );

  // Find all plantation, natural forest, and urban forest CFR IDs.
  $tids = array();
  $tids['cfr_plantation'] = db_query($query . " AND t.description LIKE '%Plantation%'", $args)->fetchCol();
  $tids['cfr_natural'] = db_query($query . " AND t.description LIKE '%Natural Forest%'", $args)->fetchCol();
  $tids['cfr_urban'] = db_query($query . " AND t.description LIKE '%Urban Forest%'", $args)->fetchCol();

  // Define the tables and field name to update.
  $tables = array(
    'field_data_field_farm_area_type',
    'field_revision_field_farm_area_type',
  );
  $field = 'field_farm_area_type_value';

  // Convert all CFRs to their new area type.
  foreach ($tids as $type => $type_tids) {
    foreach ($tables as $table) {
      $query = "UPDATE {$table} SET $field = :type WHERE entity_type = 'taxonomy_term' AND entity_id IN (:tids)";
      $args = array(
        ':type' => $type,
        ':tids' => $type_tids,
      );
      db_query($query, $args);
    }
  }
}
