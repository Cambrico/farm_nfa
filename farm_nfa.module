<?php

/**
 * @file
 * farmOS module for Uganda's National Forestry Authority.
 */

include_once 'farm_nfa.features.inc';

/**
 * Implements hook_menu().
 */
function farm_nfa_menu() {

  // Forest plan budget form.
  $items['farm/plan/%farm_plan/budget'] = array(
    'title' => 'Budget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_nfa_forest_plan_budget_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_nfa.plan.budget.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
  );

  // Remove a budget item.
  $items['farm/plan/%farm_plan/budget/%/remove'] = array(
    'title' => 'Remove Budget Item',
    'description' => 'This budget item will be removed from the plan.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_nfa_forest_plan_budget_remove_form', 2, 4),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_nfa.plan.budget.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Load NFA budget items from the database for a particular plan.
 *
 * @param $plan_id
 *   The plan ID.
 * @param $type
 *   The type of budget items to load (expense or income).
 *
 * @return array
 *   Returns an array of budget items from the {farm_nfa_budget_item} database.
 */
function farm_nfa_budget_items($plan_id, $type) {

  // Start with an empty array.
  $items = array();

  // If a plan ID isn't provided, bail.
  if (empty($plan_id)) {
    return $items;
  }

  // Perform the query.
  $query = 'SELECT * FROM {farm_nfa_budget_item} WHERE plan_id = :plan_id AND type = :type';
  $args = array(
    ':plan_id' => $plan_id,
    ':type' => $type,
  );
  $result = db_query($query, $args);

  // Assemble the results.
  while ($item = $result->fetchAssoc()) {
    $items[] = $item;
  }

  // Return the items.
  return $items;
}

/**
 * Implements hook_theme
 */
function farm_nfa_theme() {
  return array(
    'farm_nfa_forest_plan_budget_fieldset' => array(
      'render element' => 'fieldset',
      'file' => 'farm_nfa.plan.budget.inc',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function farm_nfa_form_alter(&$form, &$form_state, $form_id) {

  // Alter forms that are part of the forest plan.
  $form_ids = array(
    'farm_forest_plan_planting_form',
    'farm_forest_plan_management_form',
  );
  if (!in_array($form_id, $form_ids)) {
    return;
  }

  // Add our submit function for linking budget items to logs.
  $form['#submit'][] = 'farm_nfa_budget_item_log_submit';
}

/**
 * Submit function for linking budget items to logs.
 */
function farm_nfa_budget_item_log_submit($form, &$form_state) {

  // Get the current user.
  global $user;

  // If the plan ID is not set, bail.
  if (empty($form_state['values']['plan']->id)) {
    return;
  }
  $plan_id = $form_state['values']['plan']->id;

  // If logs have not been saved to form state storage, bail.
  if (empty($form_state['storage']['logs'])) {
    return;
  }

  // Retrieve the logs.
  $logs = $form_state['storage']['logs'];

  // Iterate through the logs.
  foreach ($logs as $log) {

    // If it doesn't have an ID, skip it.
    if (empty($log->id)) {
      continue;
    }

    // Check to see if the log is already linked to a budget item.
    $linked = db_query('SELECT COUNT(*) FROM {farm_nfa_budget_item} WHERE log_id = :log_id', array(':log_id' => $log->id))->fetchField();

    // If it isn't linked, create a new budget item using the title of the log.
    switch ($log->type) {
      case 'farm_activity':
        $type = 'expense';
        $category = t('Activity');
        break;
      case 'farm_observation':
        $type = 'expense';
        $category = t('Observation');
        break;
      case 'farm_transplanting':
        $type = 'expense';
        $category = t('Planting');
        break;
    }
    if (empty($linked) && !empty($type) && !empty($category)) {
      $budget_item = array(
        'plan_id' => $plan_id,
        'log_id' => $log->id,
        'description' => $log->name,
        'type' => $type,
        'category' => $category,
        'unit_value' => 0,
        'quantity' => 0,
        'total_value' => 0,
        'date_required' => $log->timestamp,
        'date_created' => REQUEST_TIME,
        'date_updated' => REQUEST_TIME,
        'user_id' => $user->uid,
      );
      drupal_write_record('farm_nfa_budget_item', $budget_item);
      drupal_set_message(t('A budget item has been added. <a href="!budget_path">View budget</a>.', array('!budget_path' => url('farm/plan/' . $plan_id . '/budget'))));
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function farm_nfa_entity_delete($entity, $type) {

  // If the entity is not a log, bail.
  if ($type != 'log') {
    return;
  }

  // If the log ID is empty, bail.
  if (empty($entity->id)) {
    return;
  }

  // Delete any budget items associated with this log.
  db_query('DELETE FROM {farm_nfa_budget_item} WHERE log_id = :log_id', array(':log_id' => $entity->id));
}
