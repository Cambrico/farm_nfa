<?php

/**
 * @file
 * farmOS module for Uganda's National Forestry Authority.
 */

include_once 'farm_nfa.features.inc';

/**
 * Implements hook_init().
 */
function farm_nfa_init() {

  // Set the site name to "FMIS".
  global $conf;
  $conf['site_name'] = 'FMIS';

  // Add CSS to all pages.
  drupal_add_css(drupal_get_path('module', 'farm_nfa') . '/css/farm_nfa.css');
}

/**
 * Implements hook_permission().
 */
function farm_nfa_permission() {
  return array(
    'access nfa dashboard' => array(
      'title' => t('Access NFA dashboard'),
      'description' => t('Access the NFA forest management dashboard'),
    ),
  );
}

/**
 * Implements hook_farm_access_perms().
 */
function farm_nfa_farm_access_perms($role) {
  return array('access nfa dashboard');
}

/**
 * Implements hook_menu().
 */
function farm_nfa_menu() {

  // NFA dashboard.
  $items['fmis'] = array(
    'title' => 'FMIS',
    'page callback' => 'farm_nfa_dashboard',
    'access arguments' => array('access nfa dashboard'),
    'file' => 'farm_nfa.dashboard.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Forest plan budget form.
  $items['farm/plan/%farm_plan/budget'] = array(
    'title' => 'Budget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_nfa_forest_plan_budget_form', 2),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_nfa.plan.budget.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 35,
  );

  // Remove a budget item.
  $items['farm/plan/%farm_plan/budget/%/remove'] = array(
    'title' => 'Remove Budget Item',
    'description' => 'This budget item will be removed from the plan.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farm_nfa_forest_plan_budget_remove_form', 2, 4),
    'access callback' => 'farm_forest_plan_access',
    'access arguments' => array(2),
    'file' => 'farm_nfa.plan.budget.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function farm_nfa_menu_alter(&$items) {

  // Replace the access callback for forest management plan tabs with our own.
  $menu_items = array(
    'area' => 'farm/plan/%farm_plan/area',
    'budget' => 'farm/plan/%farm_plan/budget',
    'planting' => 'farm/plan/%farm_plan/planting',
    'inventory' => 'farm/plan/%farm_plan/inventory',
    'management' => 'farm/plan/%farm_plan/management',
    'harvest' => 'farm/plan/%farm_plan/harvest',
  );
  foreach ($menu_items as $tab => $path) {
    if (!empty($items[$path])) {
      $items[$path]['access callback'] = 'farm_nfa_forest_plan_access';
      $items[$path]['access arguments'] = array(2, $tab);
    }
  }
}

/**
 * Replacement access callback for forest plan tabs, to enable/disable them
 * based on working circles (log categories) associated with the plan.
 */
function farm_nfa_forest_plan_access($farm_plan, $tab) {

  // Load working circles associated with the plan.
  $categories = array();
  if (!empty($farm_plan->id)) {
    $result = db_query('SELECT tid FROM {farm_nfa_forest_plan_categories} WHERE plan_id=:plan_id', array(':plan_id' => $farm_plan->id));
    foreach ($result as $row) {
      if (!empty($row->tid)) {
        $term = taxonomy_term_load($row->tid);
        if (!empty($term)) {
          $categories[] = $term;
        }
      }
    }
  }

  // Define which working circles allow access to each tab.
  // Conservation - area, management, (enrichment) planting, budget, (report) (plse see question below).
  // Partnerships & community livelihoods - area, management, planting (enrichment), budget, (report)
  // Production - same as for plantations
  // Research and Education - area, management, budget, (report)
  // Tourism - area, management, budget, (report)
  $circle_tabs = array(
    t('Conservation') => array('area', 'budget', 'planting', 'management'),
    t('Partnerships & community livelihoods') => array('area', 'budget', 'planting', 'management'),
    t('Production') => array('area', 'planting', 'budget', 'inventory', 'management', 'harvest'),
    t('Research and Education') => array('area', 'budget', 'management'),
    t('Tourism') => array('area', 'management', 'budget'),
  );

  // Iterate through the categories associated with the plan and build an array
  // of allowed tabs.
  $allowed_tabs = array();
  foreach ($categories as $category) {
    $term_label = entity_label('taxonomy_term', $category);
    if (array_key_exists($term_label, $circle_tabs)) {
      $allowed_tabs += $circle_tabs[$term_label];
    }
  }

  // If allowed tabs were collected, deny access if the current tab is not
  // included.
  if (!empty($allowed_tabs)) {
    if (!in_array($tab, $allowed_tabs)) {
      return FALSE;
    }
  }

  // Finally, delegate to the original access callback.
  return farm_forest_plan_access($farm_plan);
}

/**
 * Load NFA budget items from the database for a particular plan.
 *
 * @param $plan_id
 *   The plan ID.
 * @param $type
 *   The type of budget items to load (expense or income).
 *
 * @return array
 *   Returns an array of budget items from the {farm_nfa_budget_item} database.
 */
function farm_nfa_budget_items($plan_id, $type) {

  // Start with an empty array.
  $items = array();

  // If a plan ID isn't provided, bail.
  if (empty($plan_id)) {
    return $items;
  }

  // Perform the query.
  $query = 'SELECT * FROM {farm_nfa_budget_item} WHERE plan_id = :plan_id AND type = :type';
  $args = array(
    ':plan_id' => $plan_id,
    ':type' => $type,
  );
  $result = db_query($query, $args);

  // Assemble the results.
  while ($item = $result->fetchAssoc()) {
    $items[] = $item;
  }

  // Return the items.
  return $items;
}

/**
 * Implements hook_theme
 */
function farm_nfa_theme() {
  return array(
    'farm_nfa_forest_plan_budget_fieldset' => array(
      'render element' => 'fieldset',
      'file' => 'farm_nfa.plan.budget.inc',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_nfa_form_farm_plan_form_alter(&$form, &$form_state, $form_id) {

  // If this is not a forest plan, bail.
  if (empty($form['farm_plan']['#value']->type) || $form['farm_plan']['#value']->type != 'forest') {
    return;
  }

  // Add a forest plan type field.
  $plan_type = NULL;
  if (!empty($form['farm_plan']['#value']->id)) {
    $plan_type = db_query('SELECT type FROM {farm_nfa_forest_plan_type} WHERE plan_id=:plan_id', array(':plan_id' => $form['farm_plan']['#value']->id))->fetchField();
  }
  $form['forest_plan_type'] = array(
    '#type' => 'select',
    '#title' => t('Forest plan type'),
    '#options' => array(
      'natural' => t('Natural management plan'),
      'plantation' => t('Plantation plan'),
    ),
    '#default_value' => $plan_type,
    '#required' => TRUE,
  );
  $form['#group_children']['forest_plan_type'] = 'group_farm_general';

  // Add a log category field. This is used to hide/show tabs based on which
  // categories (NFA working circles) the plan is associated with.
  $categories = array();
  $category_options = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term');
  $query->entityCondition('bundle', 'farm_log_categories');
  $result = $query->execute();
  if (isset($result['taxonomy_term'])) {
    $category_ids = array_keys($result['taxonomy_term']);
    $categories = entity_load('taxonomy_term', $category_ids);
  }
  foreach ($categories as $category) {
    $entity_label = entity_label('taxonomy_term', $category);
    $category_options[$category->tid] = $entity_label;
  }
  $selected_categories = array();
  if (!empty($form['farm_plan']['#value']->id)) {
    $result = db_query('SELECT tid FROM {farm_nfa_forest_plan_categories} WHERE plan_id=:plan_id', array(':plan_id' => $form['farm_plan']['#value']->id));
    foreach ($result as $row) {
      if (!empty($row->tid)) {
        $selected_categories[$row->tid] = $row->tid;
      }
    }
  }
  $form['forest_plan_working_circles'] = array(
    '#type' => 'select',
    '#title' => t('Working circles'),
    '#description' => t('Select the working circles that are involved with this plan. This will affect what planning functions are available. Leaving this blank will enable all functionality.'),
    '#options' => $category_options,
    '#default_value' => $selected_categories,
    '#multiple' => TRUE,
    '#weight' => 90,
  );
  $form['#group_children']['forest_plan_working_circles'] = 'group_farm_general';

  // Add submit function for processing additional fields.
  $form['actions']['submit']['#submit'][] = 'farm_nfa_farm_plan_form_submit';
}

/**
 * Submit handler for saving forest_plan_type in farm_plan_form.
 */
function farm_nfa_farm_plan_form_submit($form, &$form_state) {

  // If the plan ID is not available, bail.
  if (empty($form_state['values']['farm_plan']->id)) {
    return;
  }
  $plan_id = $form_state['values']['farm_plan']->id;

  // If a plan type is selected, save it.
  if (!empty($form_state['values']['forest_plan_type'])) {
    $record = array(
      'plan_id' => $plan_id,
      'type' => $form_state['values']['forest_plan_type'],
    );
    db_query('DELETE FROM {farm_nfa_forest_plan_type} WHERE plan_id=:plan_id', array(':plan_id' => $plan_id));
    drupal_write_record('farm_nfa_forest_plan_type', $record);
  }

  // If log categories are selected, save them.
  if (isset($form_state['values']['forest_plan_working_circles'])) {
    $records = array();
    foreach ($form_state['values']['forest_plan_working_circles'] as $tid) {
      $records[] = array(
        'plan_id' => $plan_id,
        'tid' => $tid,
      );
    }
    db_query('DELETE FROM {farm_nfa_forest_plan_categories} WHERE plan_id=:plan_id', array(':plan_id' => $plan_id));
    foreach ($records as $record) {
      drupal_write_record('farm_nfa_forest_plan_categories', $record);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_nfa_form_farm_forest_plan_inventory_form_alter(&$form, &$form_state, $form_id) {

  // Alter forest plan inventory form...

  // Iterate through the log fieldsets.
  foreach (element_children($form['logs']) as $key) {

    // These fields are stored in the notes field, so they are only available
    // as separate fields when creating a new log.
    if ($key == 'new') {

      // Coup number.
      $form['logs'][$key]['coup'] = array(
        '#type' => 'textfield',
        '#title' => t('Coup number'),
        '#weight' => 5,
      );
    }
  }

  // Add submit function.
  /**
   * @see farm_nfa_form_alter()
   * We add the submit function there because it needs to be added after
   * farm_nfa_budget_item_log_submit().
   */
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_nfa_form_farm_forest_plan_area_form_alter(&$form, &$form_state, $form_id) {

  // Add our validation callback.
  $form['#validate'][] = 'farm_nfa_forest_plan_area_form_validate';
}

/**
 * Validate callback for the forest plan area form.
 */
function farm_nfa_forest_plan_area_form_validate($form, &$form_state) {

  // Get the plan ID. Bail if it's not available.
  if (empty($form_state['values']['plan']->id)) {
    return;
  }
  $plan_id = $form_state['values']['plan']->id;

  // Load areas already associated with the plan.
  $area_ids = farm_plan_linked_records('area', $plan_id);
  $areas = array();
  if (!empty($area_ids)) {
    $areas = entity_load('taxonomy_term', $area_ids);
  }

  // If there are no areas, bail.
  if (empty($areas)) {
    return;
  }

  // Iterate through the areas to see if there are any CFRs.
  $cfr = FALSE;
  foreach ($areas as $area) {
    if (!empty($area->field_farm_area_type[LANGUAGE_NONE][0]['value']) && $area->field_farm_area_type[LANGUAGE_NONE][0]['value'] == 'cfr') {
      $cfr = TRUE;
      break;
    }
  }

  // If the area being added is a CFR, but a CFR is already associated with the
  // plan, set a validation error.
  if ($cfr && !empty($form_state['storage']['area']->field_farm_area_type[LANGUAGE_NONE][0]['value']) && $form_state['storage']['area']->field_farm_area_type[LANGUAGE_NONE][0]['value'] == 'cfr') {
    form_set_error('area', t('A CFR is already associated with this plan. You may only associate one CFR with a plan.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function farm_nfa_form_farm_forest_plan_harvest_form_alter(&$form, &$form_state, $form_id) {

  // Alter forest plan harvest form...

  // Iterate through the log fieldsets.
  foreach (element_children($form['logs']) as $key) {

    // These fields are stored in the notes field, so they are only available
    // as separate fields when creating a new log.
    if ($key == 'new') {

      // Coup number.
      $form['logs'][$key]['coup'] = array(
        '#type' => 'textfield',
        '#title' => t('Coup number'),
        '#weight' => 5,
      );

      // Tender.
      $form['logs'][$key]['tender'] = array(
        '#type' => 'textfield',
        '#title' => t('Tender name'),
        '#weight' => 25,
      );

      // Supervisor.
      $form['logs'][$key]['supervisor'] = array(
        '#type' => 'textfield',
        '#title' => t('Supervisor'),
        '#weight' => 25,
      );
    }

    // Price (saved to a budget line item).
    $harvest_price = '';
    if ($key != 'new') {
      $budget_line_value = db_query('SELECT unit_value FROM {farm_nfa_budget_item} WHERE log_id = :log_id', array(':log_id' => $key))->fetchField();
      if (!empty($budget_line_value)) {
        $harvest_price = $budget_line_value;
      }
    }
    $form['logs'][$key]['price'] = array(
      '#type' => 'textfield',
      '#title' => t('Price'),
      '#default_value' => $harvest_price,
      '#weight' => 35,
    );
  }

  // Add submit function.
  /**
   * @see farm_nfa_form_alter()
   * We add the submit function there because it needs to be added after
   * farm_nfa_budget_item_log_submit().
   */
}

/**
 * Submit function for extra fields added to harvest and inventory forms.
 */
function farm_nfa_plan_log_fields_submit($form, &$form_state) {

  // If there are no logs saved in form state storage, bail.
  if (empty($form_state['storage']['logs'])) {
    return;
  }

  // Iterate through logs.
  foreach ($form_state['storage']['logs'] as $log) {

    // Match up the log to the form values. If a match is not found, assume that
    // it is a new log.
    if (!empty($form_state['values']['logs'][$log->id])) {
      $key = $log->id;
    }
    else {
      $key = 'new';
    }

    // If any of the text fields are set, add them to notes (these will only be
    // set on new logs.
    if ($key == 'new') {
      $notes = array();
      $text_fields = array(
        'coup' => t('Coup number'),
        'tender' => t('Tender'),
        'supervisor' => t('Supervisor'),
      );
      foreach ($text_fields as $name => $label) {
        if (!empty($form_state['values']['logs'][$key][$name])) {
          $notes[] = $label . ': ' . $form_state['values']['logs'][$key][$name];
        }
      }

      // Get notes already set on the log.
      if (!empty($log->field_farm_notes[LANGUAGE_NONE][0]['value'])) {
        $notes[] = $log->field_farm_notes[LANGUAGE_NONE][0]['value'];
      }

      // Implode notes array and save it to the log.
      if (!empty($notes)) {
        $log->field_farm_notes[LANGUAGE_NONE][0]['value'] = implode("\n\n", $notes);
        log_save($log);
      }
    }

    // If the log is a harvest, process the price field.
    if ($log->type == 'farm_harvest') {

      // If the price has changed, update the budget item.
      if ($form_state['values']['logs'][$key]['price'] != $form['logs'][$key]['price']['#default_value']) {
        if (!empty($log->id)) {
          $price = $form_state['values']['logs'][$key]['price'];
          if (empty($price)) {
            $price = 0;
          }
          db_query('UPDATE {farm_nfa_budget_item} SET unit_value = :price, quantity = 1, total_value = :price WHERE log_id = :log_id', array(':price' => $price, ':log_id' => $log->id));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function farm_nfa_form_alter(&$form, &$form_state, $form_id) {

  // Alter forms that are part of the forest plan.
  $form_ids = array(
    'farm_forest_plan_planting_form',
    'farm_forest_plan_management_form',
    'farm_forest_plan_inventory_form',
    'farm_forest_plan_harvest_form',
  );
  if (!in_array($form_id, $form_ids)) {
    return;
  }

  // Load the plan type.
  $plan_type = NULL;
  if (!empty($form['plan']['#value']->id)) {
    $plan_type = db_query('SELECT type FROM {farm_nfa_forest_plan_type} WHERE plan_id=:plan_id', array(':plan_id' => $form['plan']['#value']->id))->fetchField();
  }

  // If the plan type is "natural", add category field to logs.
  if ($plan_type == 'natural') {

    // Build a list of log category options, which will represent working circles.
    $categories = array();
    $category_options = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term');
    $query->entityCondition('bundle', 'farm_log_categories');
    $result = $query->execute();
    if (isset($result['taxonomy_term'])) {
      $category_ids = array_keys($result['taxonomy_term']);
      $categories = entity_load('taxonomy_term', $category_ids);
    }
    foreach ($categories as $category) {
      $entity_label = entity_label('taxonomy_term', $category);
      $category_options[$category->tid] = $entity_label;
    }

    // Iterate through the log fieldsets.
    foreach (element_children($form['logs']) as $key) {

      // Add a log category field, named "Working Circle".
      $selected_categories = array();
      if (!empty($form['logs'][$key]['log']['#value']->field_farm_log_category[LANGUAGE_NONE])) {
        foreach ($form['logs'][$key]['log']['#value']->field_farm_log_category[LANGUAGE_NONE] as $term_ref) {
          if (!empty($term_ref['tid'])) {
            $selected_categories[$term_ref['tid']] = $term_ref['tid'];
          }
        }
      }
      $form['logs'][$key]['category'] = array(
        '#type' => 'select',
        '#title' => t('Working circle'),
        '#options' => $category_options,
        '#default_value' => $selected_categories,
        '#multiple' => TRUE,
        '#weight' => 95,
      );
    }
  }

  // Add our submit function for linking budget items to logs and saving log
  // categories.
  $form['#submit'][] = 'farm_nfa_budget_item_log_submit';

  // If this is the harvest or inventory form, add the log fields submit
  // function.
  if (in_array($form_id, array('farm_forest_plan_harvest_form', 'farm_forest_plan_inventory_form'))) {
    $form['#submit'][] = 'farm_nfa_plan_log_fields_submit';
  }
}

/**
 * Submit function for linking budget items to logs and saving log categories.
 */
function farm_nfa_budget_item_log_submit($form, &$form_state) {

  // Get the current user.
  global $user;

  // If the plan ID is not set, bail.
  if (empty($form_state['values']['plan']->id)) {
    return;
  }
  $plan_id = $form_state['values']['plan']->id;

  // If logs have not been saved to form state storage, bail.
  if (empty($form_state['storage']['logs'])) {
    return;
  }

  // Retrieve the logs.
  $logs = $form_state['storage']['logs'];

  // Iterate through the logs.
  foreach ($logs as $log) {

    // If it doesn't have an ID, skip it.
    if (empty($log->id)) {
      continue;
    }

    // Match up the log to the form values. If a match is not found, assume that
    // it is a new log.
    if (!empty($form_state['values']['logs'][$log->id])) {
      $key = $log->id;
    }
    else {
      $key = 'new';
    }

    // Check to see if the log is already linked to a budget item.
    $linked = db_query('SELECT COUNT(*) FROM {farm_nfa_budget_item} WHERE log_id = :log_id', array(':log_id' => $log->id))->fetchField();

    // If it isn't linked, create a new budget item using the title of the log.
    switch ($log->type) {
      case 'farm_activity':
        $type = 'expense';
        $category = t('Activity');
        break;
      case 'farm_observation':
        $type = 'expense';
        $category = t('Observation');
        break;
      case 'farm_transplanting':
        $type = 'expense';
        $category = t('Planting');
        break;
      case 'farm_harvest':
        $type = 'income';
        $category = t('Harvest');
        break;
    }
    if (empty($linked) && !empty($type) && !empty($category)) {
      $budget_item = array(
        'plan_id' => $plan_id,
        'log_id' => $log->id,
        'description' => $log->name,
        'type' => $type,
        'category' => $category,
        'unit_value' => 0,
        'quantity' => 0,
        'total_value' => 0,
        'date_required' => $log->timestamp,
        'date_created' => REQUEST_TIME,
        'date_updated' => REQUEST_TIME,
        'user_id' => $user->uid,
      );
      drupal_write_record('farm_nfa_budget_item', $budget_item);
      drupal_set_message(t('A budget item has been added. <a href="!budget_path">View budget</a>.', array('!budget_path' => url('farm/plan/' . $plan_id . '/budget'))));
    }

    // Update categories on the log.
    if (isset($form_state['values']['logs'][$key]['category'])) {
      $log_wrapper = entity_metadata_wrapper('log', $log);
      $log_wrapper->field_farm_log_category = $form_state['values']['logs'][$key]['category'];
      $log_wrapper->save();
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function farm_nfa_entity_delete($entity, $type) {

  // If the entity is not a log, bail.
  if ($type != 'log') {
    return;
  }

  // If the log ID is empty, bail.
  if (empty($entity->id)) {
    return;
  }

  // Delete any budget items associated with this log.
  db_query('DELETE FROM {farm_nfa_budget_item} WHERE log_id = :log_id', array(':log_id' => $entity->id));
}
