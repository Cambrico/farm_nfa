<?php

use Drupal\log\Entity\LogType;
use Drush\Drush;

/**
 * @file
 * Install, update and uninstall functions for the farm_nfa module.
 */

/*
 * Uninstall farm_forest_plan and farm_input modules to remove toolbar links.
 */
function farm_nfa_remove_toolbar_links_helper() {
  // Delete forest plan and input log entities before uninstalling the modules.
  $plan_storage = \Drupal::service('entity_type.manager')->getStorage('plan');
  $plan_results = $plan_storage->getQuery()
    ->condition('type', 'forest')
    ->accessCheck(FALSE)
    ->execute();
  if ($plan_results) {
    $plans = $plan_storage->loadMultiple($plan_results);
    $plan_storage->delete($plans);
  }

  $log_storage = \Drupal::service('entity_type.manager')->getStorage('log');
  $log_results = $log_storage->getQuery()
    ->condition('type', 'input')
    ->accessCheck(FALSE)
    ->execute();
  if ($log_results) {
    $logs = $log_storage->loadMultiple($log_results);
    $log_storage->delete($logs);
  }

  // Uninstall the following modules to hide its toolbar menu links.
  \Drupal::service('module_installer')->uninstall(
    ['farm_forest_plan', 'farm_input', 'farm_update']
  );
}

/**
 * Implements hook_install().
 */
function farm_nfa_install(){

  // Rename "Land" assets to "Land (Admin)".
  \Drupal::configFactory()->getEditable('asset.type.land')->set('label', 'Land (Admin)')->save();

  farm_nfa_remove_toolbar_links_helper();
  \Drupal::service('module_installer')->uninstall(['farm_ui_action']);
}

/**
 * Implements hook_update_N().
 *
 * Uninstall modules farm_forest_plan and farm_input.
 */
function farm_nfa_update_9001(&$sandbox) {
  farm_nfa_remove_toolbar_links_helper();
}

/**
 * Implements hook_update_N().
 *
 * Uninstall module farm_ui_action module.
 */
function farm_nfa_update_9002(&$sandbox) {
  \Drupal::service('module_installer')->uninstall(['farm_ui_action']);
}

/**
 * Implements hook_update_N().
 *
 * Update the default workflow for the farmOS core modules.
 */
function farm_nfa_update_9003(&$sandbox) {
  foreach (['activity', 'harvest', 'observation'] as $log_type_id) {
    $log_type = LogType::load($log_type_id);
    $log_type->setWorkflowId('farm_nfa_log_default');
    $log_type->save();
  }
}

/**
 * Implements hook_update_N().
 *
 * Reinstall module farm_ui_action module.
 */
function farm_nfa_update_9004(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_ui_action']);
}

/**
 * Implements hook_update_N().
 *
 * Install module farm_nfa_migrate module.
 */
function farm_nfa_update_9005(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_nfa_migrate']);
}

/**
 * Implements hook_update_N().
 *
 * Install module farm_nfa_planting module.
 */
function farm_nfa_update_9006(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_nfa_planting']);
}

/**
 * Implements hook_update_N().
 *
 * Change the forest third party settings so it is not location or fixed.
 */
function farm_nfa_update_9007(&$sandbox) {
  // We're setting location and fixed to FALSE so we force the forest asset
  // location to use the log compartment in a way they're related.
  // In this case, we want forests to be movable assets, like the Ents in LOTR.
  $forest_type = \Drupal::entityTypeManager()->getStorage('asset_type')->load('forest');
  $forest_type->setThirdPartySetting('farm_location', 'is_location', FALSE);
  $forest_type->setThirdPartySetting('farm_location', 'is_fixed', FALSE);
  $forest_type->save();
}

/**
 * Implements hook_update_N().
 *
 * Enable log asset module.
 */
function farm_nfa_update_9008(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_log_asset']);
}

/**
 * Implements hook_update_N().
 *
 * Remove misconfigured fields
 */
function farm_nfa_update_9010(&$sandbox) {
  $fields_by_entity = [
    'asset' => [
      'variety',
      'species',
      'detailed_vegetation',
      'predominant_vegetation',
      'current_purpose',
      'field_boundary_opening_history',
      'field_boundary_plan_details',
    ],
    'media' => [
      'date',
    ],
  ];
  $bundle_field_maps = Drupal::keyValue('entity.definitions.bundle_field_map');
  foreach ($fields_by_entity as $entity_type_id => $field_names) {
    $data = $bundle_field_maps->get($entity_type_id);
    foreach($field_names as $field_name) {
      unset($data[$field_name]);
    }
    $bundle_field_maps->set($entity_type_id, $data);
  }
}

/**
 * Implements hook_update_N().
 *
 * Uninstall Devel Entity Updates and Devel
 */
function farm_nfa_update_9011(&$sandbox) {
  \Drupal::service('module_installer')->uninstall(['devel_entity_updates']);
  \Drupal::service('module_installer')->uninstall(['devel']);
}

/**
 * Disable farmOS Migrate modules.
 */
function farm_nfa_update_9012(&$sandbox) {
  \Drupal::service('module_installer')->uninstall(['farm_migrate']);
  \Drupal::service('module_installer')->uninstall(['farm_nfa_migrate']);
}

/**
 * Enable Farm NFA Config Update module.
 */
function farm_nfa_update_9013(&$sandbox) {
  \Drupal::service('module_installer')->install(['farm_nfa_config_update']);
}

/**
 * Import overrides of farmOS views.
 */
function farm_nfa_update_9014(&$sandbox) {
  // Load the config items to be imported. Config yamls are placed in a folder
  // named after the update hook.
  $config_path = \Drupal::service('extension.path.resolver')->getPath('module', 'farm_nfa') . "/deployments/9014";
  $process = Drush::drush(Drush::aliasManager()->getSelf(), 'config-import', ['--partial'], ['source' => $config_path]);
  $process->run();
}

/**
 * Revert to farmOS default configuration.
 */
function farm_nfa_update_9015(&$sandbox) {
  // Config items to be reverted.
  $items = [
    ['type' => 'flag', 'name' => 'monitor'],
    ['type' => 'flag', 'name' => 'priority'],
    ['type' => 'flag', 'name' => 'review'],
    ['type' => 'system.simple', 'name' => 'gin_lb.settings'],
    ['type' => 'quantity_type', 'name' => 'standard'],
    ['type' => 'system.simple', 'name' => 'update.settings'],
    ['type' => 'view', 'name' => 'asset_admin'],
    ['type' => 'view', 'name' => 'farm_asset_reference'],
    ['type' => 'view', 'name' => 'farm_inventory'],
    ['type' => 'view', 'name' => 'farm_location_reference'],
    ['type' => 'view', 'name' => 'farm_log'],
    ['type' => 'view', 'name' => 'farm_people'],
    ['type' => 'view', 'name' => 'plan_admin'],
    ['type' => 'view', 'name' => 'farm_quantity'],
    ['type' => 'system.simple', 'name' => 'system.date'],
  ];

  $config_update = \Drupal::service('config_update.config_update');
  foreach ($items as $item) {
    $config_update->revert($item['type'], $item['name']);
  }
}
