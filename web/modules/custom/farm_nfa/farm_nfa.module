<?php

/**
 * @file
 * Provides alters and hooks for the farm nfa module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseDialogCommand;
use Drupal\Core\Ajax\MessageCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\farm_nfa\Form\FarmNfaContentEntityDeleteForm;
use Drupal\farm_nfa\Form\FarmNfaQuantityInlineForm;
use Drupal\log\Entity\LogInterface;
use Drupal\plan\Entity\PlanInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_type_alter().
 */
function farm_nfa_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['plan']->setLinkTemplate('management', '/plan/{plan}/management');
  $entity_types['plan']->setLinkTemplate('budget', '/plan/{plan}/budget');
  $entity_types['plan']->setLinkTemplate('inventory', '/plan/{plan}/inventory');
  $entity_types['plan']->setLinkTemplate('harvest', '/plan/{plan}/harvest');
  $entity_types['quantity']->setHandlerClass('inline_form', FarmNfaQuantityInlineForm::class);
  $entity_types['log']->setFormClass('delete', FarmNfaContentEntityDeleteForm::class);
}

/**
 * Implements hook_entity_type_build().
 */
function farm_nfa_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Config\Entity\ConfigEntityType[] $entity_types */
  $entity_types['plan']->setHandlerClass('local_task_provider', ['default' => 'Drupal\farm_nfa\Menu\NfaEntityLocalTaskProvider']);
}

/**
 * Implements hook_css_alter().
 */
function farm_nfa_css_alter(&$css) {
  // Workaround to display the css of the offcanvas dialog in a way Gin/Claro
  // don't mess with the styles.
  unset($css['core/misc/dialog/off-canvas.base.css']);
  unset($css['core/misc/dialog/off-canvas.button.css']);
  unset($css['core/misc/dialog/off-canvas.css']);
  unset($css['core/misc/dialog/off-canvas.details.css']);
  unset($css['core/misc/dialog/off-canvas.dropbutton.css']);
  unset($css['core/misc/dialog/off-canvas.form.css']);
  unset($css['core/misc/dialog/off-canvas.layout.css']);
  unset($css['core/misc/dialog/off-canvas.motion.css']);
  unset($css['core/misc/dialog/off-canvas.reset.css']);
  unset($css['core/misc/dialog/off-canvas.table.css']);
  unset($css['core/misc/dialog/off-canvas.theme.css']);
}

/**
 * Implements hook_preprocess_menu__toolbar__gin().
 */
function farm_nfa_preprocess_menu__toolbar__gin(&$variables) {
  if (!empty($variables['items'])) {
    // Unset locations menu item.
    if (array_key_exists('farm.locations', $variables['items'])) {
      unset($variables['items']['farm.locations']);
    }
    if (array_key_exists('farm.records', $variables['items']) && !empty($variables['items']['farm.records']['below'])) {
      $records_below = $variables['items']['farm.records']['below'];
      if (array_key_exists('views_view:views.farm_asset.page', $records_below) && !empty($records_below['views_view:views.farm_asset.page']['below'])) {
        // Unset block and land menu items inside of assets menu.
        unset($variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.block']);
        unset($variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.land']);

        // Make assets names plural.
        // https://github.com/National-Forestry-Authority/forests/issues/260
        $variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.cfr']['title'] = t('CFRs');
        $variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.compartment']['title'] = t('Compartments');
        $variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.zone']['title'] = t('Zones');
        // Switch order of Zones and Compartments.
        $compartments = $variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.compartment'];
        unset($variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.compartment']);
        $variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['below']['farm.asset.type:farm.asset.compartment'] = $compartments;
      }

      $variables['items']['farm.records']['below']['views_view:views.farm_asset.page']['title'] = t('Locations');

      // Unset quantity menu item.
      if (array_key_exists('views_view:views.farm_quantity.page', $records_below)) {
        unset($variables['items']['farm.records']['below']['views_view:views.farm_quantity.page']);
      }

    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function farm_nfa_menu_links_discovered_alter(&$links) {
  // Move the farm.asset.forests menu link to the farm.records parent.
  // https://github.com/National-Forestry-Authority/forests/issues/260.
  if (!empty($links['farm.asset.type:farm.asset.forest'])) {
    $links['farm.asset.type:farm.asset.forest']['parent'] = 'farm.records';
    $links['farm.asset.type:farm.asset.forest']['title'] = t('Assets');
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 */
function farm_nfa_menu_local_actions_alter(&$local_actions) {
  unset($local_actions['entity.asset.add_page']);
  unset($local_actions['entity.log.add_page']);
  unset($local_actions['entity.plan.add_page']);
  unset($local_actions['farm.actions:farm.add.log.bundle']);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function farm_nfa_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name == ('farm.asset.locations' || 'entity.asset.canonical')) {
    $data['tabs'][0]['farm.asset.locations']['#link']['title'] = t('Sectors & CFRs');
    $data['tabs'][0]['entity.asset.canonical']['#link']['title'] = t('Sectors & CFRs');
  }
}

/**
 * Implements hook_farm_dashboard_panes().
 */
function farm_nfa_farm_dashboard_panes() {
  return [
    'dashboard_assets_search' => [
      'title' => t('Assets'),
      'block' => 'farm_nfa_dashboard_search_form_block',
      'region'  => 'first',
      'args'  => [
        'route' => 'entity.asset.collection',
        'entity_type' => 'asset',
      ],
    ],
    'dashboard_plans_search' => [
      'title' => t('Plans'),
      'block' => 'farm_nfa_dashboard_search_form_block',
      'region'  => 'second',
      'args'  => [
        'route' => 'entity.plan.collection',
        'entity_type' => 'plan',
      ],
    ],
  ];
}

/**
 * Centralised way to know what route corresponds to a plan/log.
 *
 * @param \Drupal\plan\Entity\PlanInterface $plan
 *   The plan entity.
 * @param \Drupal\log\Entity\LogInterface $log
 *   The log entity.
 *
 * @return \Symfony\Component\Routing\Route
 *   The plan route object.
 */
function farm_nfa_plan_route_log_types(PlanInterface $plan, LogInterface $log) {
  // This is a centralised way to know what tab goes where, otherwise we're
  // spreading this logic all over the place.
  // @todo Instead of a random function, this might be better off being saved on
  // the entity types as third party so it is not hardcoded.
  $log_types_plan_routes = [
    'plantation' => [
      'activity' => 'management',
      'harvest' => 'harvest',
      'planting' => 'planting',
      'plantation_inventory' => 'inventory',
    ],
    'natural' => [
      'activity' => 'management',
      'harvest' => 'harvest',
      'planting' => 'planting',
      'natural_inventory' => 'inventory',
    ],
  ];

  $route_name = 'entity.plan.' . $log_types_plan_routes[$plan->bundle()][$log->bundle()];
  return \Drupal::service('router.route_provider')->getRouteByName($route_name);
}

/**
 * Implements hook_entity_operation_alter().
 */
function farm_nfa_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (!$entity instanceof LogInterface) {
    return;
  }
  if (!$entity->access('update')) {
    return;
  }
  /** @var \Drupal\plan\Entity\PlanInterface $plan */
  $plan = \Drupal::routeMatch()->getParameter('plan') ?? \Drupal::service('farm_nfa.referer_plan_loader')->load();
  if (!$plan) {
    return;
  }
  $route = farm_nfa_plan_route_log_types($plan, $entity);

  // Replace the edit operation.
  $operations['edit'] = [
    'title' => t('Edit'),
    'url' => Url::fromRoute($route->getOption('parameters')['task_route'],
      ['plan' => $plan->id()],
      [
        'attributes' => [
          'class' => ['use-ajax'],
          'data-dialog-type' => 'dialog',
          'data-dialog-renderer' => 'off_canvas',
          'data-dialog-options' => Json::encode([
            'width' => '50%',
          ]),
        ],
        'query' => ['log' => $entity->id()],
      ]
    ),
  ];
  // Replace the delete operation.
  if ($operations['delete']) {
    /** @var \Drupal\Core\Url $delete_url */
    $delete_url = $operations['delete']['url'];
    $operations['delete']['url'] = Url::fromRoute(
      $delete_url->getRouteName(),
      $delete_url->getRouteParameters(),
      $delete_url->getOptions() + [
        'attributes' => [
          'class' => ['use-ajax'],
          'data-dialog-type' => 'dialog',
          'data-dialog-renderer' => 'off_canvas',
          'data-dialog-options' => Json::encode([
            'width' => '50%',
          ]),
        ],
      ],
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function farm_nfa_form_alter(&$form, FormStateInterface $form_state) {
  $build_info = $form_state->getBuildInfo();
  if (isset($build_info['base_form_id']) && $build_info['base_form_id'] == 'log_confirm_form') {
    // Do not ajaxify outside the off canvas.
    $request_stack = \Drupal::requestStack();
    $current_request = $request_stack->getCurrentRequest();
    if ($current_request->request->get('_drupal_ajax') != 1) {
      return;
    }
    $form['actions']['submit']['#ajax'] = [
      'callback' => 'farm_nfa_confirm_form_ajax_helper',
    ];
    $form['actions']['cancel'] = [
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#button_type' => 'danger',
      '#ajax' => [
        'callback' => 'farm_nfa_confirm_form_cancel_ajax_helper',
      ],
      '#weight' => 10,
    ];
  }
}

/**
 * Reload the log listing after deleting.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function farm_nfa_confirm_form_ajax_helper($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  if ($plan = \Drupal::service('farm_nfa.referer_plan_loader')->load()) {
    $log = $form_state->getFormObject()->getEntity();
    $route = farm_nfa_plan_route_log_types($plan, $log);
    $log_types = $route->getDefault('log_types');
    $view = views_embed_view('plan_logs', 'embed', $plan->id(), implode('+', $log_types));
    $response->addCommand(new ReplaceCommand('.view-plan-logs', $view));
    $response->setAttachments($form['#attached']);
    foreach (\Drupal::messenger()->all() as $type) {
      foreach ($type as $message) {
        $response->addCommand(new MessageCommand($message, NULL, ['type' => 'status'], FALSE));
      }
    }
    \Drupal::messenger()->deleteAll();
  }

  $response->addCommand(new CloseDialogCommand('#drupal-off-canvas'));
  return $response;
}

/**
 * Replaces the cancel link by a button that closes the dialog.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function farm_nfa_confirm_form_cancel_ajax_helper($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $response->addCommand(new CloseDialogCommand('#drupal-off-canvas'));
  return $response;
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function farm_nfa_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'log') {
    $fields['location']->addConstraint('DuplicateReference');
  }
  if ($entity_type->id() == 'forest_type') {
    $fields['location']->addConstraint('DuplicateReference');
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * @see farm_ui_map_module_implements_alter()
 */
function farm_nfa_views_pre_render(ViewExecutable $view) {
  $land_types = ['sector' => t('Sector'), 'range' => t('Range')];

  // Render a map attachment above views of assets.
  if ($view->id() == 'farm_asset' && isset($land_types[$view->current_display])) {

    $land_type = $view->current_display;
    // Get exposed filters.
    $exposed_filters = $view->getExposedInput();

    // Start array of asset layers to add.
    $asset_layers = [
      'full' => [],
    ];

    $filters = [
      'type' => ['land'],
      'land_type_value' => [$land_type],
      'status' => isset($exposed_filters['status']) ? $exposed_filters['status'] : 'active',
      'items_per_page' => isset($exposed_filters['items_per_page']) ? $exposed_filters['items_per_page'] : 50,
    ];

    // Add a cluster layer for summarizing asset counts.
    $asset_layers['cluster']['all'] = [
      'label' => t('Asset counts'),
      'cluster' => TRUE,
      'filters' => $filters,
    ];

    // Load the map layer style.
    /** @var \Drupal\farm_map\Entity\LayerStyleInterface $layer_style */
    $layer_style = \Drupal::service('farm_map.layer_style_loader')->load(['asset_type' => 'land']);
    if (!is_null($layer_style)) {
      $color = $layer_style->get('color');
    }

    // Add layer for the asset type.
    $asset_layers['full']['full_land'] = [
      'group' => t('Location assets'),
      'label' => $land_types[$land_type],
      'asset_type' => 'land',
      'filters' => $filters,
      'color' => $color ?? 'orange',
      'zoom' => TRUE,
    ];

    // Build the map render array.
    $map = [
      '#type' => 'farm_map',
      '#map_type' => 'asset_list',
    ];
    $all_layers = array_merge($asset_layers['cluster'], $asset_layers['full']);
    $map['#map_settings']['asset_type_layers'] = $all_layers;

    // Render the map.
    $view->attachment_before['asset_map'] = $map;
  }

  // Hide CFR blocks on plan if fields are empty.
  if ($view->id() == 'plan_blocks') {
    $storage = \Drupal::service('entity_type.manager')->getStorage('asset');
    if ($view->current_display == 'physical_features') {
      foreach ($view->result as $key => $row) {
        /** @var \Drupal\asset\Entity\AssetInterface $asset */
        $asset = $storage->load($row->asset_field_data_plan__asset_id);
        if (empty($asset->climate_weather_variation->getValue()) &&
          empty($asset->drainage->getValue()) &&
          empty($asset->geology_soils->getValue()) &&
          empty($asset->landscape_topology->getValue()) &&
          empty($asset->vegetation_biodiversity->getValue())) {
          unset($view->result[$key]);
        }
      }
    }
    if ($view->current_display == 'situational_assessment') {
      foreach ($view->result as $key => $row) {
        /** @var \Drupal\asset\Entity\AssetInterface $asset */
        $asset = $storage->load($row->asset_field_data_plan__asset_id);
        if (empty($asset->social_economic_cultural->getValue())) {
          unset($view->result[$key]);
        }
      }
    }
    if ($view->current_display == 'programs_activities') {
      foreach ($view->result as $key => $row) {
        /** @var \Drupal\asset\Entity\AssetInterface $asset */
        $asset = $storage->load($row->asset_field_data_plan__asset_id);
        if (empty($asset->management_goals_objectives->getValue())) {
          unset($view->result[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function farm_nfa_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Don't allow a CFR to exist in more than one plan.
  if ($entity_type->id() === 'plan' && !empty($fields['asset'])) {
    $fields['asset']->addConstraint('UniqueField', []);
  }
}
