<?php

/**
 * @file
 * Provides alters and hooks for the farm nfa module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\farm_nfa\Form\FarmNfaQuantityInlineForm;
use Drupal\log\Entity\LogInterface;

/**
 * Implements hook_entity_type_alter().
 */
function farm_nfa_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['plan']->setLinkTemplate('management', '/plan/{plan}/management');
  $entity_types['plan']->setLinkTemplate('budget', '/plan/{plan}/budget');
  $entity_types['plan']->setLinkTemplate('inventory', '/plan/{plan}/inventory');
  $entity_types['plan']->setLinkTemplate('harvest', '/plan/{plan}/harvest');
  $entity_types['quantity']->setHandlerClass('inline_form', FarmNfaQuantityInlineForm::class);
}

/**
 * Implements hook_entity_type_build().
 */
function farm_nfa_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Config\Entity\ConfigEntityType[] $entity_types */
  $entity_types['plan']->setHandlerClass('local_task_provider', ['default' => 'Drupal\farm_nfa\Menu\NfaEntityLocalTaskProvider']);
}

/**
 * Implements hook_css_alter().
 */
function farm_nfa_css_alter(&$css) {
  // Workaround to display the css of the offcanvas dialog in a way Gin/Claro
  // don't mess with the styles.
  $options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($options['parameters']) && !empty($options['parameters']['task_route'])) {
    unset($css['core/misc/dialog/off-canvas.base.css']);
    unset($css['core/misc/dialog/off-canvas.button.css']);
    unset($css['core/misc/dialog/off-canvas.css']);
    unset($css['core/misc/dialog/off-canvas.details.css']);
    unset($css['core/misc/dialog/off-canvas.dropbutton.css']);
    unset($css['core/misc/dialog/off-canvas.form.css']);
    unset($css['core/misc/dialog/off-canvas.layout.css']);
    unset($css['core/misc/dialog/off-canvas.motion.css']);
    unset($css['core/misc/dialog/off-canvas.reset.css']);
    unset($css['core/misc/dialog/off-canvas.table.css']);
    unset($css['core/misc/dialog/off-canvas.theme.css']);
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function farm_nfa_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (!$entity instanceof LogInterface) {
    return;
  }
  if (!$entity->access('update')) {
    return;
  }
  $options = \Drupal::routeMatch()->getRouteObject()->getOptions();
  if (isset($options['parameters']) && !empty($options['parameters']['task_route'])) {
    // Replace the edit operation.
    $operations['edit'] = [
      'title' => t('Edit'),
      'url' => Url::fromRoute($options['parameters']['task_route'],
        ['plan' => \Drupal::routeMatch()->getRawParameter('plan')],
        [
          'attributes' => [
            'class' => ['use-ajax'],
            'data-dialog-type' => 'dialog',
            'data-dialog-renderer' => 'off_canvas',
            'data-dialog-options' => Json::encode([
              'width' => '50%',
             ]),
           ],
          'query' => ['log' => $entity->id()]
        ]
      ),
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function farm_nfa_preprocess_block__local_actions_block(&$variables) {
  // Hide action buttons in dashboard page.
  if (\Drupal::routeMatch()->getRouteName() == 'farm.dashboard') {
    foreach ($variables['content'] as $key => $action) {
      $action_route = substr($key, 0, 12);
      // Check that action route belongs to farm actions.
      if ($action_route == 'farm.actions') {
        $variables['content'][$key]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_farm_dashboard_panes().
 */
function farm_nfa_farm_dashboard_panes() {
  return [
    'dashboard_assets_search' => [
      'title' => t('Assets'),
      'block_plugin' => 'farm_nfa_search_form_block',
      'region'  => 'first',
      'args'  => [
        'route' => 'entity.asset.collection',
        'entity_type' => 'asset'
      ],
    ],
    'dashboard_plans_search' => [
      'title' => t('Plans'),
      'block_plugin' => 'farm_nfa_search_form_block',
      'region'  => 'second',
      'args'  => [
        'route' => 'entity.plan.collection',
        'entity_type' => 'plan'
      ],
    ],
  ];
}
